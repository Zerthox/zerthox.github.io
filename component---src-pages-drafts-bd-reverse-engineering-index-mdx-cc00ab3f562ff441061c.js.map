{"version":3,"file":"component---src-pages-drafts-bd-reverse-engineering-index-mdx-cc00ab3f562ff441061c.js","mappings":"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","sources":["webpack://zerthox.github.io/./src/pages/drafts/bd/reverse-engineering/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/zerthox.github.io/zerthox.github.io/src/templates/markdown.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Banner = makeShortcode(\"Banner\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Banner type=\"warn\" bold mdxType=\"Banner\">This is still a DRAFT with parts being subject to change!</Banner>\n    <p>{`This guide will focus on reverse engineering in a context of Discord modifications, which means parts of it will be specific to webpack.\nHowever, some of the points discussed here can be applied to other web applications as well.`}</p>\n    <h2>{`Toolchains`}</h2>\n    <p>{`In modern web development code often goes through a non-trivial toolchain before it lands in a user's browser in production.\nThese toolchains may include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Type checking (e.g. `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.typescriptlang.org/\"\n        }}>{`TypeScript`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://flow.org/\"\n        }}>{`Flow`}</a>{`)`}</li>\n      <li parentName=\"ul\">{`Transpiling code (e.g. `}<a parentName=\"li\" {...{\n          \"href\": \"https://babeljs.io/\"\n        }}>{`Babel`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/alangpierce/sucrase\"\n        }}>{`sucrase`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.typescriptlang.org/\"\n        }}>{`TypeScript`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://coffeescript.org/\"\n        }}>{`CoffeeScript`}</a>{`)`}</li>\n      <li parentName=\"ul\">{`Bundling modules (e.g. `}<a parentName=\"li\" {...{\n          \"href\": \"https://webpack.js.org/\"\n        }}>{`webpack`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://rollupjs.org/\"\n        }}>{`rollup`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://esbuild.github.io/\"\n        }}>{`esbuild`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://parceljs.org/\"\n        }}>{`Parcel`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"https://browserify.org/\"\n        }}>{`Browserify`}</a>{`)`}</li>\n      <li parentName=\"ul\">{`Optimizations like \"tree-shaking\" (JavaScript slang for dead code elimination)`}</li>\n      <li parentName=\"ul\">{`Minification (size optimizations to save bandwith)`}</li>\n    </ul>\n    <p>{`The resulting code often looks very different from what any human would write and can be difficult to understand without experience.`}</p>\n    <h2>{`Bundling with webpack`}</h2>\n    <p>{`When bundling production code with webpack, the modules are converted for webpack's runtime module system - no matter which module system the source code makes use of.\nFor example let us take this very simple ES module with a single import and two exports:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {foo} from \"./other-module\";\n\nexport default foo;\n\nexport const bar = 2;\n`}</code></pre>\n    <p>{`After being transformed by webpack & the rest of the toolchain, it could look roughly something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`12345: (m, e, r) => {\n    \"use strict\";\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    });\n    var f = r(67890);\n    e.default = f;\n    e.bar = 2\n},\n`}</code></pre>\n    <p>{`Besides some added boilerplate code and minification, we can see the ES5 and ES6 syntax has been removed completely.\nThe `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` statement has been transformed into a simple call `}<inlineCode parentName=\"p\">{`r(67890)`}</inlineCode>{`.\nIn this case the `}<inlineCode parentName=\"p\">{`r`}</inlineCode>{` parameter is webpack's internally used `}<inlineCode parentName=\"p\">{`require()`}</inlineCode>{` function, which allows importing exports from other modules.\nThe passed number is the internal ID of the imported module.\nWe can find the ID of our module at the start, it is the `}<inlineCode parentName=\"p\">{`12345`}</inlineCode>{` key of our module function.\nIt is important to note that these module IDs can not be expected to be stable across multiple versions of the codebase.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`export`}</inlineCode>{` statements have been transformed into simple assignments to the `}<inlineCode parentName=\"p\">{`e`}</inlineCode>{` parameter.\nWhen evaluating a module, webpack will pass `}<inlineCode parentName=\"p\">{`m = module`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`e = module.exports`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`r = require`}</inlineCode>{` to the module function.\nAfter the module function has finished, webpack will take `}<inlineCode parentName=\"p\">{`module.exports`}</inlineCode>{` and return it to whatever other module was requiring ours.\nIt will also store the exports in a cache in order to avoid having to evaluate the module again.`}</p>\n    <h2>{`Production code patterns`}</h2>\n    <p>{`We have already seen one commonly used minification pattern in our example above.\nUnderstanding what these sometimes weird patterns are equivalent to is helpful for reverse engineering.\nHere is a table of some of the most commonly seen minification patterns:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Dist`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Source`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Explanation`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Converting a falsy number using the not operator yields `}<inlineCode parentName=\"td\">{`true`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`!1`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Converting a truthy number using the not operator yields `}<inlineCode parentName=\"td\">{`false`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`void 0`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Using the uncommon `}<a parentName=\"td\" {...{\n              \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\"\n            }}><inlineCode parentName=\"a\">{`void`}</inlineCode></a>{` operator yields `}<a parentName=\"td\" {...{\n              \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\n            }}><inlineCode parentName=\"a\">{`undefined`}</inlineCode></a>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`for (;;)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`while (true)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use of the uncommon endless `}<inlineCode parentName=\"td\">{`for`}</inlineCode>{` loop.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Besides minification there is some other weird patterns found in production code.\nThe otherwise rarely seen `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\"\n      }}>{`comma operator`}</a>{` may see more use.\nIt evaluates all expressions and returns the result of the last expression.`}</p>\n    <p>{`One special case where it is used is function calls.\nYou may stumble on cases where a function `}<inlineCode parentName=\"p\">{`obj.foo`}</inlineCode>{` is called as `}<inlineCode parentName=\"p\">{`(0, obj.foo)(arg1, arg2)`}</inlineCode>{` rather than `}<inlineCode parentName=\"p\">{`obj.foo(arg1, arg2)`}</inlineCode>{`.\nThis seems counterintuitive as the resulting code is longer, right?\nThe reason for this is `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`, as in the actual `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\n      }}>{`language keyword`}</a>{`.\nBy doing `}<inlineCode parentName=\"p\">{`(0, obj.foo)`}</inlineCode>{` we are \"stripping the context\" from the function.\nUse of `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` within the function will now evaluate to the global `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Window\"\n      }}><inlineCode parentName=\"a\">{`Window`}</inlineCode></a>{` rather than the `}<inlineCode parentName=\"p\">{`obj`}</inlineCode>{` it is defined on.`}</p>\n    <h2>{`Tips & tricks`}</h2>\n    <p>{`I will conclude this guide with a handful of tips for reverse engineering.\nSome of these are specific to whatever technologies are used in the web application.`}</p>\n    <h4>{`1. Learn the dev tools`}</h4>\n    <p>{`This is the most generic advice to give, but also important.\nThe dev tools are your best friend for any kind of reverse engineering.\nLearning how to properly use them will improve your reverse engineering process a lot.`}</p>\n    <h4>{`2. Use domain-specific dev tools extensions`}</h4>\n    <p>{`When reverse engineering for example a `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org\"\n      }}>{`React`}</a>{` application, you should also make use of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/\"\n      }}>{`React Developer Tools extension`}</a>{`.\nThey will give you easier and extra insight into the application.\nA bonus tip specific to React: data for the component selected in dev tools is accessible via the `}<inlineCode parentName=\"p\">{`$r`}</inlineCode>{` global.`}</p>\n    <h4>{`3. Use breakpoints for arguments`}</h4>\n    <p>{`You can put breakpoints on functions and then attempt to trigger a \"regular\" call to them in order to reverse engineer their arguments.\nThe dev tools will show what arguments have been passed.\nThis can be extended to investigating local variables within a specific function you are trying to understand.`}</p>\n    <h4>{`4. Use scopes for captured variables`}</h4>\n    <p>{`In Chrome's dev tools function values display a `}<inlineCode parentName=\"p\">{`[[FunctionLocation]]`}</inlineCode>{` as well as a `}<inlineCode parentName=\"p\">{`[[Scopes]]`}</inlineCode>{` attribute.\nThe `}<inlineCode parentName=\"p\">{`[[Scopes]]`}</inlineCode>{` attribute is a list of scopes sorrounding the functions and can help quickly figure out what value captured variables have.`}</p>\n    <h4>{`5. Also look at use cases`}</h4>\n    <p>{`When reverse engineering a part, also look into how it is used in or interacts with other parts of the codebase.\nIt may help understanding that part as well as building a broader understanding of sections of the application.\n`}<em parentName=\"p\">{`(Of course this does not necessarily apply to libraries bundled in the application.)`}</em></p>\n    <h4>{`6. Aim to understand`}</h4>\n    <p>{`Your utmost goal when reverse engineering usually should be understanding what is happening behind the scenes.\nYou do not need to actually reverse engineer the source of every single little piece of code when you feel like you understand what its purpose is.\nHowever, be careful with attempting to just \"make it work\", skipping parts, trial and error etc.\nThis may lead to unwanted side effects and more problems down the road.`}</p>\n    <p>{`As with most things, experience is key.\nWhile working with the production code of a given application, you get more and more familiar with the structure and how things are typically done.\nAfter some time, you may even build a mindset that enables you to fairly reliably predict the purpose and usage of parts of the codebase without having to reverse engineer them.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Banner","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","type","bold","parentName","isMDXComponent"],"sourceRoot":""}