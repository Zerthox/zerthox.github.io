{"version":3,"file":"component---src-pages-guides-index-tsx-89d5fbeff3097238a81c.js","mappings":"4LAaO,MAAMA,EAAWC,IAAAA,IAAC,KAACC,EAAI,YAAEC,EAAW,KAAEC,EAAI,OAAEC,EAAM,GAAEC,GAAkB,SACzEC,EAAAA,cAAAA,MAAAA,CAAKC,UCVS,4BDWVD,EAAAA,cAACE,EAAAA,GAAI,CAACD,UCVI,2BDUoBF,GAAIA,GAC9BC,EAAAA,cAAAA,MAAAA,CAAKC,UCRE,6BDSHD,EAAAA,cAAAA,MAAAA,CAAKC,UCVH,4BDU4BN,GAC7BE,EACGG,EAAAA,cAAAA,MAAAA,CAAKC,UCjBP,4BDiBgCJ,GAC9B,MAEPD,EAAcI,EAAAA,cAAAA,MAAAA,CAAKC,UCnBP,mCDmBuCL,GAAqB,MAE5EE,EACGE,EAAAA,cAAAA,MAAAA,CAAKC,UCxBG,8BDwBsB,MACvBD,EAAAA,cAACG,EAAAA,EAAI,CAACR,KAAMG,KAEnB,KACF,EAOGM,EAAOC,IAAAA,IAAC,QAACC,GAAmB,SACrCN,EAAAA,cAAAA,MAAAA,CAAKC,UC/BS,4BDgCTK,EAAQC,KAAI,CAACC,EAAOC,IACjBT,EAAAA,cAACP,EAAQ,eAACiB,IAAKD,GAAOD,MAExB,C,gHEbV,MAqBaG,EAAW,KArBEC,EAAAA,EAAAA,gBAAc,cAqBYC,OAAOC,MCxB3D,MApBa,KACT,MAAMC,GD6CiBC,EC7CE,SD6CyBL,IAAWM,QAAOvB,IAAAA,IAAC,OAACwB,GAAO,SAAKA,EAAOC,KAAKC,WAAW,IAAMJ,EAAO,KAA/FA,MC3CvB,OACIhB,EAAAA,cAACqB,EAAAA,GAAM,CAACC,MAAM,UACTP,EAAMQ,OAAS,EACZvB,EAAAA,cAACI,EAAAA,EAAI,CACDE,QAASS,EAAMR,KAAIb,IAAA,IAAC,YAAC8B,EAAW,OAAEN,EAAM,QAAEO,GAAQ,QAAM,CACpD9B,KAAM6B,EAAYF,MAClBvB,GAAImB,EAAOC,KACXtB,KAAM2B,EAAY3B,KAClBC,OAAQ0B,EAAY1B,OACpBF,YAAa6B,EAChB,MAEL,sBACC,C","sources":["webpack://zerthox.github.io/./src/components/list/list.tsx","webpack://zerthox.github.io/./src/components/list/list.module.scss","webpack://zerthox.github.io/./src/hooks/posts.ts","webpack://zerthox.github.io/./src/pages/guides/index.tsx"],"sourcesContent":["import React from \"react\";\nimport {Link} from \"../general\";\nimport {User} from \"../user\";\nimport * as styles from \"./list.module.scss\";\n\nexport interface ListItemProps {\n    name: string;\n    to: string;\n    description?: string;\n    date?: string;\n    author?: string;\n}\n\nexport const ListItem = ({name, description, date, author, to}: ListItemProps): JSX.Element => (\n    <div className={styles.item}>\n        <Link className={styles.link} to={to}>\n            <div className={styles.title}>\n                <div className={styles.name}>{name}</div>\n                {date ? (\n                    <div className={styles.date}>{date}</div>\n                ) : null}\n            </div>\n            {description ? <div className={styles.description}>{description}</div> : null}\n        </Link>\n        {author ? (\n            <div className={styles.author}>\n                by <User name={author}/>\n            </div>\n        ) : null}\n    </div>\n);\n\nexport interface ListProps {\n    entries: ListItemProps[];\n}\n\nexport const List = ({entries}: ListProps): JSX.Element => (\n    <div className={styles.list}>\n        {entries.map((props, i) => (\n            <ListItem key={i} {...props}/>\n        ))}\n    </div>\n);\n","// extracted by mini-css-extract-plugin\nexport var author = \"list-module--author--82ff7\";\nexport var date = \"list-module--date--f1eea\";\nexport var description = \"list-module--description--64b4a\";\nexport var item = \"list-module--item--2ff2e\";\nexport var link = \"list-module--link--a777c\";\nexport var list = \"list-module--list--48ac1\";\nexport var name = \"list-module--name--27e7d\";\nexport var title = \"list-module--title--83b07\";","import {useStaticQuery, graphql} from \"gatsby\";\n\nexport interface Frontmatter {\n    title: string;\n    author?: string;\n    date?: string;\n    updated?: string;\n    tags?: string[];\n    slug?: string;\n}\n\nexport interface Fields {\n    slug: string;\n    timeToRead: number;\n}\n\nexport interface Post {\n    frontmatter: Frontmatter;\n    fields: Fields;\n    excerpt: string;\n}\n\ninterface PostData {\n    allMdx: {\n        nodes: Post[];\n    };\n}\n\nconst usePostData = () => useStaticQuery<PostData>(graphql`\n    query Posts {\n        allMdx(sort: {frontmatter: {date: DESC}}) {\n            nodes {\n                frontmatter {\n                    title\n                    date(formatString: \"DD MMMM YYYY\")\n                    updated(formatString: \"DD MMMM YYYY\")\n                    author\n                    tags\n                }\n                excerpt\n                fields {\n                    slug\n                    timeToRead\n                }\n            }\n        }\n    }\n`);\n\nexport const usePosts = (): Post[] => usePostData().allMdx.nodes;\n\nexport const usePostsIn = (prefix: string): Post[] => usePosts().filter(({fields}) => fields.slug.startsWith(\"/\" + prefix));\n","import React from \"react\";\nimport {Layout} from \"../../components/layout\";\nimport {List} from \"../../components/list\";\nimport {usePostsIn} from \"../../hooks/posts\";\n\nconst Blog = (): JSX.Element => {\n    const posts = usePostsIn(\"guides\");\n\n    return (\n        <Layout title=\"Guides\">\n            {posts.length > 0 ? (\n                <List\n                    entries={posts.map(({frontmatter, fields, excerpt}) => ({\n                        name: frontmatter.title,\n                        to: fields.slug,\n                        date: frontmatter.date,\n                        author: frontmatter.author,\n                        description: excerpt\n                    }))}\n                />\n            ) : \"Nothing here (yet).\"}\n        </Layout>\n    );\n};\n\nexport default Blog;\n"],"names":["ListItem","_ref","name","description","date","author","to","React","className","Link","User","List","_ref2","entries","map","props","i","key","usePosts","useStaticQuery","allMdx","nodes","posts","prefix","filter","fields","slug","startsWith","Layout","title","length","frontmatter","excerpt"],"sourceRoot":""}