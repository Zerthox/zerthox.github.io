"use strict";(self.webpackChunkzerthox_github_io=self.webpackChunkzerthox_github_io||[]).push([[870],{9925:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return i},default:function(){return u}});var a=n(3366),o=(n(7294),n(4983)),r=n(9739),s=["components"],i={},l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},c=l("Banner"),p=l("CodeTabs"),h={_frontmatter:i},d=r.Z;function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)(d,Object.assign({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",null,"State management in React"),(0,o.kt)("p",null,"When working with ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org"},"React"),", the UI has a state, which determines the elements rendered onscreen.\nChanging said state will cause React to rerender the affected UI components.\nReact itself already comes with some tools to manage state:\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/faq-state.html"},"State API"),",\nwhich can be used via the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#setstate"},(0,o.kt)("inlineCode",{parentName:"a"},"this.setState()"))," method in class components\nand via the newer ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-reference.html#usestate"},(0,o.kt)("inlineCode",{parentName:"a"},"useState()"))," hook in function components.\nFor managing global state React also features a lesser known ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"Context API")," out of the box."),(0,o.kt)("p",null,"However, in large applications state management can prove more difficult or inefficient.\nThat's what resulted in the ",(0,o.kt)("a",{parentName:"p",href:"https://facebook.github.io/flux/"},"Flux")," architecture for managing data flow and application state in React.\nWhile the original Flux project by Facebook themselves is no longer actively developed, the architecture has proven useful.\nPopular state management libraries of today like ",(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/"},"Redux")," are built upon it."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://facebook.github.io/flux/img/overview/flux-simple-f8-diagram-with-client-action-1300w.png",alt:"Flux architecture"}),"\n",(0,o.kt)("em",{parentName:"p"},"Source: Facebook's Flux Docs")),(0,o.kt)("p",null,"The Flux pattern traditionally consists of central ",(0,o.kt)("strong",{parentName:"p"},"Dispatcher"),"(s), which can receive so-called Actions.\nAn ",(0,o.kt)("strong",{parentName:"p"},"Action")," represents a modification of the application's state and has an identifying type (kind) as well as a potential payload of additional data.\nActions may also be viewed as events, which happen within the application.\nThe dispatcher is responsible for forwarding the received data to the relevant ",(0,o.kt)("strong",{parentName:"p"},"Stores"),".\nEach store is used to store state information relevant to a specific part of the application.\nThis allows to separate for example which application language the user has selected from which chatroom they are currently viewing."),(0,o.kt)("p",null,"You can read more about the architecture in the ",(0,o.kt)("a",{parentName:"p",href:"https://facebook.github.io/flux/docs/in-depth-overview/"},"In-Depth Overview")," within the Flux Docs."),(0,o.kt)("p",null,'The store data as well as the ability to dispatch actions now has to be made available for UI components.\nFor the classic class-based components, this used to be typically done with wrapper components,\nwhich take care of updating and give the inner component access to store data via props or custom methods.\nThis API is sometimes also referred to as "Connect" since the name of the function used to wrap a component usually includes the word connect.\nThe alternative API for function component would be realized via the newer concept of ',(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-intro.html"},"hooks"),"."),(0,o.kt)(c,{type:"info",mdxType:"Banner"},(0,o.kt)("p",null,"The React community has been moving more and more towards ",(0,o.kt)("strong",{parentName:"p"},"function components and hooks"),".\nThey make it easy to use data within a component and have it update automatically.\nLibraries like ",(0,o.kt)("a",{parentName:"p",href:"https://react-redux.js.org/"},"React Redux")," are now recommending usage of their hooks API over older class component APIs.")),(0,o.kt)("h2",null,"Discord's Flux implementation"),(0,o.kt)("p",null,"Discord uses a (as far as we know) custom implementation of the Flux architecture.\nIt forms a large part of the data layer behind the UI layer."),(0,o.kt)(c,{type:"warn",bold:!0,mdxType:"Banner"},"While fairly stable in the past, Discord's Flux internals may change just like any other part of the internals."),(0,o.kt)("p",null,"Their implementation has both a newer hooks API they are transitioning to as well as an old connect API, which is still used in parts of the codebase.\nBoth APIs require the relevant stores in an array and a callback which computes the data and is invoked whenever a change has been detected.\nAll hooks also take an optional dependency array.\nIn the case of ",(0,o.kt)("inlineCode",{parentName:"p"},"useStateFromStores()")," a comparator function can be passed as 4th argument to customize update behaviour.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"useStateFromStoresArray()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"useStateFromStoresObject()")," hooks come with a predefined comparator for arrays and objects respectively."),(0,o.kt)(p,{names:["Hooks","Connect"],mdxType:"CodeTabs"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const MyComponent = () => {\n    const currentUser = useStateFromStores([UserStore], () => UserStore.getCurrentUser());\n\n    return (\n        <div>Current user is: {currentUser.username}</div>\n    );\n};\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const MyComponent = (props) => (\n    <div>Current user is: {props.currentUser.username}</div>\n);\n\nconst ConnectedMyComponent = Flux.connectStores([UserStore], () => ({\n    currentUser: UserStore.getCurrentUser()\n}))(MyComponent);\n"))),(0,o.kt)("p",null,"Their stores as well as their central dispatcher also allow for listeners, which are notified of any incoming actions/events.\nThis can be useful when you want to use store updates somewhere outside of the UI layer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const listener = (action) => console.log("Dispatcher received:", action);\n\nDispatcher.subscribe("ACTION_TYPE", listener);\n\nDispachter.unsubscribe("ACTION_TYPE", listener);\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const listener = () => console.log("UserStore was updated");\n\nUserStore.addChangeListener(listener);\n\nUserStore.removeChangeListener(listener);\n')),(0,o.kt)("p",null,"Besides using the intended functions for dispatching specific actions, actions can also be dispatched directly on the dispatcher using ",(0,o.kt)("inlineCode",{parentName:"p"},"Dispatcher.dispatch()"),"."),(0,o.kt)("p",null,"There is a massive amount of different actions.\nIn May 2022 nearly 1500 entries were listed within Discord's internal ",(0,o.kt)("inlineCode",{parentName:"p"},"ActionType")," TypeScript enum.\nThe enum has since been removed (most likely turned into a ",(0,o.kt)("inlineCode",{parentName:"p"},"const enum"),") in August 2022."),(0,o.kt)("h2",null,"Finding Stores"),(0,o.kt)("p",null,"As with all other internals, stores need to be found within the webpack exports cache and have to be reverse engineered.\nYou can find more information in my ",(0,o.kt)("a",{parentName:"p",href:"../getting-started"},"Getting started with BetterDiscord Plugin development")," guide.\nIn 2022 Discord added a ",(0,o.kt)("inlineCode",{parentName:"p"},"getName()")," method to their store class.\nThe name is also present as ",(0,o.kt)("inlineCode",{parentName:"p"},"displayName")," property on the store constructors.\n",(0,o.kt)("em",{parentName:"p"},"(Note: BetterDiscord's ",(0,o.kt)("inlineCode",{parentName:"em"},"byDisplayName")," filter does not search constructors as of now.)"),"\nTheoretically you can now find stores using their name rather than interface or other characteristics.\nStore names can also prove useful when figuring out a store's purpose."),(0,o.kt)(p,{names:["Props","Name"],mdxType:"CodeTabs"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const GuildStore = getModule(Filters.byProps("getGuild"));\nconst ChannelStore = getModule(Filters.byProps("getChannel", "hasChannel"));\nconst UserStore = getModule(Filters.byProps("getUser", "getCurrentUser"));\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const GuildStore = getModule((exports) => exports?.constructor?.displayName === "GuildStore");\nconst ChannelStore = getModule((exports) => exports?.constructor?.displayName === "ChannelStore");\nconst UserStore = getModule((exports) => exports?.constructor?.displayName === "UserStore");\n'))),(0,o.kt)("p",null,'Usually a good way to start is to look at a part of the UI where data from the store you are searching for is supposedly used.\nGo up the parent chain and try to find the first "normal" component whose props do not include the data itself or children with the data already "rendered".\nThe relevant stores are most likely accessed within this component.'),(0,o.kt)("p",null,"Alternatively you can attempt taking educated guesses regarding the store's name or methods - either complete or partial, like ",(0,o.kt)("inlineCode",{parentName:"p"},'name.toLowerCase().includes("guild")'),"."),(0,o.kt)("p",null,"A list of all stores can be retreived by either checking the name or by making sure it is an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Flux.Store"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'getModule(\n    (exports) => typeof exports?.getName === "function" && exports.getName().endsWith("Store"),\n    {first: false}\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"getModule((exports) => exports instanceof Flux.Store, {first: false})\n")),(0,o.kt)("p",null,"Note that the first version will be missing a couple of stores which have no name set."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-bd-flux-index-mdx-0139ac27f185134fb721.js.map